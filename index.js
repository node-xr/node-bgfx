const bgfx = require("bindings")("bgfx");

bgfx.FATAL_ERROR = {
  DEBUG_CHECK: 0,
  INVALID_SHADER: 1,
  UNABLE_TO_INITIALIZE: 2,
  BGFX_FATAL_UNABLE_TO_CREATE_TEXTURE: 3,
  BGFX_FATAL_DEVICE_LOST: 4
};

bgfx.RENDERER_TYPE = {
  NOOP: 0, //  No rendering.
  DIRECT3D9: 1, //  Direct3D 9.0
  DIRECT3D11: 2, //  Direct3D 11.0
  DIRECT3D12: 3, //  Direct3D 12.0
  GNM: 4, //  GNM
  METAL: 5, //  Metal
  NVN: 6, //  NVN
  OPENGLES: 7, //  OpenGL ES 2.0+
  OPENGL: 8, //  OpenGL 2.1+
  VULKAN: 9 //  Vulkan
};

bgfx.ATTRIB = {
  POSITION: 0, //  a_position
  NORMAL: 1, // a_normal
  TANGENT: 2, // a_tangent
  BITANGENT: 3, // a_bitangent
  COLOR0: 4, // a_color0
  COLOR1: 5, //a_color1
  COLOR2: 6, //a_color2
  COLOR3: 7, //a_color3
  INDICES: 8, //a_indices
  WEIGHT: 9, //a_weight
  TEXCOORD0: 10, //a_texcoord0
  TEXCOORD1: 11, // a_texcoord1
  TEXCOORD2: 12, // a_texcoord2
  TEXCOORD3: 13, // a_texcoord3
  TEXCOORD4: 14, // a_texcoord4
  TEXCOORD5: 15, // a_texcoord5
  TEXCOORD6: 16, // a_texcoord6
  TEXCOORD7: 17 // a_texcoord7
};

bgfx.ATTRIB_TYPE = {
  UINT8: 0, // Uint8
  UINT10: 1, // Uint10, availability depends on: `BGFX_CAPS_VERTEX_ATTRIB_UINT10`.
  INT16: 2, // Int16
  HALF: 3, // Half, availability depends on: `BGFX_CAPS_VERTEX_ATTRIB_HALF`.
  FLOAT: 4 // Float
};

bgfx.TEXTURE_FORMAT = {
  BC1: 0, // DXT1
  BC2: 1, // DXT3
  BC3: 2, // DXT5
  BC4: 3, // LATC1/ATI1
  BC5: 4, // LATC2/ATI2
  BC6H: 5, // BC6H
  BC7: 6, // BC7
  ETC1: 7, // ETC1 RGB8
  ETC2: 8, // ETC2 RGB8
  ETC2A: 9, // ETC2 RGBA8
  ETC2A1: 10, //  ETC2 RGB8A1
  PTC12: 11, //  PVRTC1 RGB 2BPP
  PTC14: 12, //  PVRTC1 RGB 4BPP
  PTC12A: 13, //  PVRTC1 RGBA 2BPP
  PTC14A: 14, //  PVRTC1 RGBA 4BPP
  PTC22: 15, //  PVRTC2 RGBA 2BPP
  PTC24: 16, //  PVRTC2 RGBA 4BPP
  ATC: 17, //  ATC RGB 4BPP
  ATCE: 18, //  ATCE RGBA 8 BPP explicit alpha
  ATCI: 19, //  ATCI RGBA 8 BPP interpolated alpha
  ASTC4X4: 20, //  ASTC 4x4 8.0 BPP
  ASTC5X5: 21, //  ASTC 5x5 5.12 BPP
  ASTC6X6: 22, //  ASTC 6x6 3.56 BPP
  ASTC8X5: 23, //  ASTC 8x5 3.20 BPP
  ASTC8X6: 24, //  ASTC 8x6 2.67 BPP
  ASTC10X5: 25, //  ASTC 10x5 2.56 BPP
  UNKNOWN: 26, //  Compressed formats above.
  R1: 27,
  A8: 28,
  R8: 29,
  R8I: 30,
  R8U: 31,
  R8S: 32,
  R16: 33,
  R16I: 34,
  R16U: 35,
  R16F: 36,
  R16S: 37,
  R32I: 38,
  R32U: 39,
  R32F: 40,
  RG8: 41,
  RG8I: 42,
  RG8U: 43,
  RG8S: 44,
  RG16: 45,
  RG16I: 46,
  RG16U: 47,
  RG16F: 48,
  RG16S: 49,
  RG32I: 50,
  RG32U: 51,
  RG32F: 52,
  RGB8: 53,
  RGB8I: 54,
  RGB8U: 55,
  RGB8S: 56,
  RGB9E5F: 57,
  BGRA8: 58,
  RGBA8: 59,
  RGBA8I: 60,
  RGBA8U: 61,
  RGBA8S: 62,
  RGBA16: 63,
  RGBA16I: 64,
  RGBA16U: 65,
  RGBA16F: 66,
  RGBA16S: 67,
  RGBA32I: 68,
  RGBA32U: 69,
  RGBA32F: 70,
  R5G6B5: 71,
  RGBA4: 72,
  RGB5A1: 73,
  RGB10A2: 74,
  RG11B10F: 75,
  UNKNOWNDEPTH: 76, //  Depth formats below.
  D16: 77,
  D24: 78,
  D24S8: 79,
  D32: 80,
  D16F: 81,
  D24F: 82,
  D32F: 83,
  D0S8: 84
};

bgfx.UNIFORM_TYPE = {
  SAMPLER: 0, //  Sampler.
  END: 1, //  Reserved, do not use.
  VEC4: 2, //  4 floats vector.
  MAT3: 3, //  3x3 matrix.
  MAT4: 4 //  4x4 matrix.
};

bgfx.BACKBUFFER_RATIO = {
  EQUAL: 0, //  Equal to backbuffer.
  HALF: 1, //  One half size of backbuffer.
  QUARTER: 2, //  One quarter size of backbuffer.
  EIGHTH: 3, //  One eighth size of backbuffer.
  SIXTEENTH: 4, //  One sixteenth size of backbuffer.
  DOUBLE: 5 //  Double size of backbuffer.
};

bgfx.OCCLUSION_QUERY_RESULT = {
  INVISIBLE: 0, //  Query failed test.
  VISIBLE: 1, //  Query passed test.
  NORESULT: 2 //  Query result is not available yet.
};

bgfx.TOPOLOGY = {
  TRI_LIST: 0, //  Triangle list.
  TRI_STRIP: 1, //  Triangle strip.
  LINE_LIST: 2, //  Line list.
  LINE_STRIP: 3, //  Line strip.
  POINT_LIST: 4 //  Point list.
};

bgfx.TOPOLOGY_CONVERT = {
  TRI_LIST_FLIP_WINDING: 0, // Flip winding order of triangle list.
  TRI_STRIP_FLIP_WINDING: 1, // Flip winding order of trinagle strip.
  TRI_LIST_TO_LINE_LIST: 2, // Convert triangle list to line list.
  TRI_STRIP_TO_TRI_LIST: 3, // Convert triangle strip to triangle list.
  LINE_STRIP_TO_LINE_LIST: 4 // Convert line strip to line list.
};

bgfx.TOPOLOGY_SORT = {
  DIRECTION_FRONT_TO_BACK_MIN: 0,
  DIRECTION_FRONT_TO_BACK_AVG: 1,
  DIRECTION_FRONT_TO_BACK_MAX: 2,
  DIRECTION_BACK_TO_FRONT_MIN: 3,
  DIRECTION_BACK_TO_FRONT_AVG: 4,
  DIRECTION_BACK_TO_FRONT_MAX: 5,
  DISTANCE_FRONT_TO_BACK_MIN: 6,
  DISTANCE_FRONT_TO_BACK_AVG: 7,
  DISTANCE_FRONT_TO_BACK_MAX: 8,
  DISTANCE_BACK_TO_FRONT_MIN: 9,
  DISTANCE_BACK_TO_FRONT_AVG: 10,
  DISTANCE_BACK_TO_FRONT_MAX: 11
};

bgfx.VIEW_MODE = {
  DEFAULT: 0, // Default sort order.
  SEQUENTIAL: 1, // Sort in the same order in which submit calls were called.
  DEPTH_ASCENDING: 2, // Sort draw call depth in ascending order.
  DEPTH_DESCENDING: 3 // Sort draw call depth in descending order.
};

bgfx.RENDER_FRAME = {
  NO_CONTEXT: 0, // Renderer context is not created yet.
  RENDER: 1, // Renderer context is created and rendering.
  TIMEOUT: 2, // Renderer context wait for main thread signal timed out without rendering.
  EXITING: 3 // Renderer context is getting destroyed.
};

/**
m.BGFX_API_VERSION = 0x5fULL
m.BGFX_STATE_WRITE_R = 0x1ULL
m.BGFX_STATE_WRITE_G = 0x2ULL
m.BGFX_STATE_WRITE_B = 0x4ULL
m.BGFX_STATE_WRITE_A = 0x8ULL
m.BGFX_STATE_WRITE_Z = 0x4000000000ULL
m.BGFX_STATE_WRITE_RGB = 0x7ULL
m.BGFX_STATE_WRITE_MASK = 0x400000000fULL
m.BGFX_STATE_DEPTH_TEST_LESS = 0x10ULL
m.BGFX_STATE_DEPTH_TEST_LEQUAL = 0x20ULL
m.BGFX_STATE_DEPTH_TEST_EQUAL = 0x30ULL
m.BGFX_STATE_DEPTH_TEST_GEQUAL = 0x40ULL
m.BGFX_STATE_DEPTH_TEST_GREATER = 0x50ULL
m.BGFX_STATE_DEPTH_TEST_NOTEQUAL = 0x60ULL
m.BGFX_STATE_DEPTH_TEST_NEVER = 0x70ULL
m.BGFX_STATE_DEPTH_TEST_ALWAYS = 0x80ULL
m.BGFX_STATE_DEPTH_TEST_SHIFT = 0x4ULL
m.BGFX_STATE_DEPTH_TEST_MASK = 0xf0ULL
m.BGFX_STATE_BLEND_ZERO = 0x1000ULL
m.BGFX_STATE_BLEND_ONE = 0x2000ULL
m.BGFX_STATE_BLEND_SRC_COLOR = 0x3000ULL
m.BGFX_STATE_BLEND_INV_SRC_COLOR = 0x4000ULL
m.BGFX_STATE_BLEND_SRC_ALPHA = 0x5000ULL
m.BGFX_STATE_BLEND_INV_SRC_ALPHA = 0x6000ULL
m.BGFX_STATE_BLEND_DST_ALPHA = 0x7000ULL
m.BGFX_STATE_BLEND_INV_DST_ALPHA = 0x8000ULL
m.BGFX_STATE_BLEND_DST_COLOR = 0x9000ULL
m.BGFX_STATE_BLEND_INV_DST_COLOR = 0xa000ULL
m.BGFX_STATE_BLEND_SRC_ALPHA_SAT = 0xb000ULL
m.BGFX_STATE_BLEND_FACTOR = 0xc000ULL
m.BGFX_STATE_BLEND_INV_FACTOR = 0xd000ULL
m.BGFX_STATE_BLEND_SHIFT = 0xcULL
m.BGFX_STATE_BLEND_MASK = 0xffff000ULL
m.BGFX_STATE_BLEND_EQUATION_ADD = 0x0ULL
m.BGFX_STATE_BLEND_EQUATION_SUB = 0x10000000ULL
m.BGFX_STATE_BLEND_EQUATION_REVSUB = 0x20000000ULL
m.BGFX_STATE_BLEND_EQUATION_MIN = 0x30000000ULL
m.BGFX_STATE_BLEND_EQUATION_MAX = 0x40000000ULL
m.BGFX_STATE_BLEND_EQUATION_SHIFT = 0x1cULL
m.BGFX_STATE_BLEND_EQUATION_MASK = 0x3f0000000ULL
m.BGFX_STATE_BLEND_INDEPENDENT = 0x400000000ULL
m.BGFX_STATE_BLEND_ALPHA_TO_COVERAGE = 0x800000000ULL
m.BGFX_STATE_CULL_CW = 0x1000000000ULL
m.BGFX_STATE_CULL_CCW = 0x2000000000ULL
m.BGFX_STATE_CULL_SHIFT = 0x24ULL
m.BGFX_STATE_CULL_MASK = 0x3000000000ULL
m.BGFX_STATE_ALPHA_REF_SHIFT = 0x28ULL
m.BGFX_STATE_ALPHA_REF_MASK = 0xff0000000000ULL
m.BGFX_STATE_PT_TRISTRIP = 0x1000000000000ULL
m.BGFX_STATE_PT_LINES = 0x2000000000000ULL
m.BGFX_STATE_PT_LINESTRIP = 0x3000000000000ULL
m.BGFX_STATE_PT_POINTS = 0x4000000000000ULL
m.BGFX_STATE_PT_SHIFT = 0x30ULL
m.BGFX_STATE_PT_MASK = 0x7000000000000ULL
m.BGFX_STATE_POINT_SIZE_SHIFT = 0x34ULL
m.BGFX_STATE_POINT_SIZE_MASK = 0xf0000000000000ULL
m.BGFX_STATE_MSAA = 0x100000000000000ULL
m.BGFX_STATE_LINEAA = 0x200000000000000ULL
m.BGFX_STATE_CONSERVATIVE_RASTER = 0x400000000000000ULL
m.BGFX_STATE_RESERVED_SHIFT = 0x3dULL
m.BGFX_STATE_RESERVED_MASK = 0xe000000000000000ULL
m.BGFX_STATE_NONE = 0x0ULL
m.BGFX_STATE_MASK = 0xffffffffffffffffULL
m.BGFX_STATE_DEFAULT = 0x10000500000001fULL
m.BGFX_STATE_BLEND_ADD = 0x2222000ULL
m.BGFX_STATE_BLEND_ALPHA = 0x6565000ULL
m.BGFX_STATE_BLEND_DARKEN = 0x1b2222000ULL
m.BGFX_STATE_BLEND_LIGHTEN = 0x242222000ULL
m.BGFX_STATE_BLEND_MULTIPLY = 0x1919000ULL
m.BGFX_STATE_BLEND_NORMAL = 0x6262000ULL
m.BGFX_STATE_BLEND_SCREEN = 0x4242000ULL
m.BGFX_STATE_BLEND_LINEAR_BURN = 0x9a9a9000ULL
m.BGFX_STENCIL_FUNC_REF_SHIFT = 0x0ULL
m.BGFX_STENCIL_FUNC_REF_MASK = 0xffULL
m.BGFX_STENCIL_FUNC_RMASK_SHIFT = 0x8ULL
m.BGFX_STENCIL_FUNC_RMASK_MASK = 0xff00ULL
m.BGFX_STENCIL_TEST_LESS = 0x10000ULL
m.BGFX_STENCIL_TEST_LEQUAL = 0x20000ULL
m.BGFX_STENCIL_TEST_EQUAL = 0x30000ULL
m.BGFX_STENCIL_TEST_GEQUAL = 0x40000ULL
m.BGFX_STENCIL_TEST_GREATER = 0x50000ULL
m.BGFX_STENCIL_TEST_NOTEQUAL = 0x60000ULL
m.BGFX_STENCIL_TEST_NEVER = 0x70000ULL
m.BGFX_STENCIL_TEST_ALWAYS = 0x80000ULL
m.BGFX_STENCIL_TEST_SHIFT = 0x10ULL
m.BGFX_STENCIL_TEST_MASK = 0xf0000ULL
m.BGFX_STENCIL_OP_FAIL_S_ZERO = 0x0ULL
m.BGFX_STENCIL_OP_FAIL_S_KEEP = 0x100000ULL
m.BGFX_STENCIL_OP_FAIL_S_REPLACE = 0x200000ULL
m.BGFX_STENCIL_OP_FAIL_S_INCR = 0x300000ULL
m.BGFX_STENCIL_OP_FAIL_S_INCRSAT = 0x400000ULL
m.BGFX_STENCIL_OP_FAIL_S_DECR = 0x500000ULL
m.BGFX_STENCIL_OP_FAIL_S_DECRSAT = 0x600000ULL
m.BGFX_STENCIL_OP_FAIL_S_INVERT = 0x700000ULL
m.BGFX_STENCIL_OP_FAIL_S_SHIFT = 0x14ULL
m.BGFX_STENCIL_OP_FAIL_S_MASK = 0xf00000ULL
m.BGFX_STENCIL_OP_FAIL_Z_ZERO = 0x0ULL
m.BGFX_STENCIL_OP_FAIL_Z_KEEP = 0x1000000ULL
m.BGFX_STENCIL_OP_FAIL_Z_REPLACE = 0x2000000ULL
m.BGFX_STENCIL_OP_FAIL_Z_INCR = 0x3000000ULL
m.BGFX_STENCIL_OP_FAIL_Z_INCRSAT = 0x4000000ULL
m.BGFX_STENCIL_OP_FAIL_Z_DECR = 0x5000000ULL
m.BGFX_STENCIL_OP_FAIL_Z_DECRSAT = 0x6000000ULL
m.BGFX_STENCIL_OP_FAIL_Z_INVERT = 0x7000000ULL
m.BGFX_STENCIL_OP_FAIL_Z_SHIFT = 0x18ULL
m.BGFX_STENCIL_OP_FAIL_Z_MASK = 0xf000000ULL
m.BGFX_STENCIL_OP_PASS_Z_ZERO = 0x0ULL
m.BGFX_STENCIL_OP_PASS_Z_KEEP = 0x10000000ULL
m.BGFX_STENCIL_OP_PASS_Z_REPLACE = 0x20000000ULL
m.BGFX_STENCIL_OP_PASS_Z_INCR = 0x30000000ULL
m.BGFX_STENCIL_OP_PASS_Z_INCRSAT = 0x40000000ULL
m.BGFX_STENCIL_OP_PASS_Z_DECR = 0x50000000ULL
m.BGFX_STENCIL_OP_PASS_Z_DECRSAT = 0x60000000ULL
m.BGFX_STENCIL_OP_PASS_Z_INVERT = 0x70000000ULL
m.BGFX_STENCIL_OP_PASS_Z_SHIFT = 0x1cULL
m.BGFX_STENCIL_OP_PASS_Z_MASK = 0xf0000000ULL
m.BGFX_STENCIL_NONE = 0x0ULL
m.BGFX_STENCIL_MASK = 0xffffffffULL
m.BGFX_STENCIL_DEFAULT = 0x0ULL
m.BGFX_CLEAR_NONE = 0x0ULL
m.BGFX_CLEAR_COLOR = 0x1ULL
m.BGFX_CLEAR_DEPTH = 0x2ULL
m.BGFX_CLEAR_STENCIL = 0x4ULL
m.BGFX_CLEAR_DISCARD_COLOR_0 = 0x8ULL
m.BGFX_CLEAR_DISCARD_COLOR_1 = 0x10ULL
m.BGFX_CLEAR_DISCARD_COLOR_2 = 0x20ULL
m.BGFX_CLEAR_DISCARD_COLOR_3 = 0x40ULL
m.BGFX_CLEAR_DISCARD_COLOR_4 = 0x80ULL
m.BGFX_CLEAR_DISCARD_COLOR_5 = 0x100ULL
m.BGFX_CLEAR_DISCARD_COLOR_6 = 0x200ULL
m.BGFX_CLEAR_DISCARD_COLOR_7 = 0x400ULL
m.BGFX_CLEAR_DISCARD_DEPTH = 0x800ULL
m.BGFX_CLEAR_DISCARD_STENCIL = 0x1000ULL
m.BGFX_CLEAR_DISCARD_COLOR_MASK = 0x7f8ULL
m.BGFX_CLEAR_DISCARD_MASK = 0x1ff8ULL
m.BGFX_DEBUG_NONE = 0x0ULL
m.BGFX_DEBUG_WIREFRAME = 0x1ULL
m.BGFX_DEBUG_IFH = 0x2ULL
m.BGFX_DEBUG_STATS = 0x4ULL
m.BGFX_DEBUG_TEXT = 0x8ULL
m.BGFX_DEBUG_PROFILER = 0x10ULL
m.BGFX_BUFFER_NONE = 0x0ULL
m.BGFX_BUFFER_COMPUTE_FORMAT_8x1 = 0x1ULL
m.BGFX_BUFFER_COMPUTE_FORMAT_8x2 = 0x2ULL
m.BGFX_BUFFER_COMPUTE_FORMAT_8x4 = 0x3ULL
m.BGFX_BUFFER_COMPUTE_FORMAT_16x1 = 0x4ULL
m.BGFX_BUFFER_COMPUTE_FORMAT_16x2 = 0x5ULL
m.BGFX_BUFFER_COMPUTE_FORMAT_16x4 = 0x6ULL
m.BGFX_BUFFER_COMPUTE_FORMAT_32x1 = 0x7ULL
m.BGFX_BUFFER_COMPUTE_FORMAT_32x2 = 0x8ULL
m.BGFX_BUFFER_COMPUTE_FORMAT_32x4 = 0x9ULL
m.BGFX_BUFFER_COMPUTE_FORMAT_SHIFT = 0x0ULL
m.BGFX_BUFFER_COMPUTE_FORMAT_MASK = 0xfULL
m.BGFX_BUFFER_COMPUTE_TYPE_INT = 0x10ULL
m.BGFX_BUFFER_COMPUTE_TYPE_UINT = 0x20ULL
m.BGFX_BUFFER_COMPUTE_TYPE_FLOAT = 0x30ULL
m.BGFX_BUFFER_COMPUTE_TYPE_SHIFT = 0x4ULL
m.BGFX_BUFFER_COMPUTE_TYPE_MASK = 0x30ULL
m.BGFX_BUFFER_COMPUTE_READ = 0x100ULL
m.BGFX_BUFFER_COMPUTE_WRITE = 0x200ULL
m.BGFX_BUFFER_DRAW_INDIRECT = 0x400ULL
m.BGFX_BUFFER_ALLOW_RESIZE = 0x800ULL
m.BGFX_BUFFER_INDEX32 = 0x1000ULL
m.BGFX_BUFFER_COMPUTE_READ_WRITE = 0x300ULL
m.BGFX_TEXTURE_NONE = 0x0ULL
m.BGFX_TEXTURE_MSAA_SAMPLE = 0x800000000ULL
m.BGFX_TEXTURE_RT = 0x1000000000ULL
m.BGFX_TEXTURE_RT_MSAA_X2 = 0x2000000000ULL
m.BGFX_TEXTURE_RT_MSAA_X4 = 0x3000000000ULL
m.BGFX_TEXTURE_RT_MSAA_X8 = 0x4000000000ULL
m.BGFX_TEXTURE_RT_MSAA_X16 = 0x5000000000ULL
m.BGFX_TEXTURE_RT_MSAA_SHIFT = 0x24ULL
m.BGFX_TEXTURE_RT_MSAA_MASK = 0x7000000000ULL
m.BGFX_TEXTURE_RT_WRITE_ONLY = 0x8000000000ULL
m.BGFX_TEXTURE_RT_MASK = 0xf000000000ULL
m.BGFX_TEXTURE_COMPUTE_WRITE = 0x100000000000ULL
m.BGFX_TEXTURE_SRGB = 0x200000000000ULL
m.BGFX_TEXTURE_BLIT_DST = 0x400000000000ULL
m.BGFX_TEXTURE_READ_BACK = 0x800000000000ULL
m.BGFX_SAMPLER_NONE = 0x0ULL
m.BGFX_SAMPLER_U_MIRROR = 0x1ULL
m.BGFX_SAMPLER_U_CLAMP = 0x2ULL
m.BGFX_SAMPLER_U_BORDER = 0x3ULL
m.BGFX_SAMPLER_U_SHIFT = 0x0ULL
m.BGFX_SAMPLER_U_MASK = 0x3ULL
m.BGFX_SAMPLER_V_MIRROR = 0x4ULL
m.BGFX_SAMPLER_V_CLAMP = 0x8ULL
m.BGFX_SAMPLER_V_BORDER = 0xcULL
m.BGFX_SAMPLER_V_SHIFT = 0x2ULL
m.BGFX_SAMPLER_V_MASK = 0xcULL
m.BGFX_SAMPLER_W_MIRROR = 0x10ULL
m.BGFX_SAMPLER_W_CLAMP = 0x20ULL
m.BGFX_SAMPLER_W_BORDER = 0x30ULL
m.BGFX_SAMPLER_W_SHIFT = 0x4ULL
m.BGFX_SAMPLER_W_MASK = 0x30ULL
m.BGFX_SAMPLER_MIN_POINT = 0x40ULL
m.BGFX_SAMPLER_MIN_ANISOTROPIC = 0x80ULL
m.BGFX_SAMPLER_MIN_SHIFT = 0x6ULL
m.BGFX_SAMPLER_MIN_MASK = 0xc0ULL
m.BGFX_SAMPLER_MAG_POINT = 0x100ULL
m.BGFX_SAMPLER_MAG_ANISOTROPIC = 0x200ULL
m.BGFX_SAMPLER_MAG_SHIFT = 0x8ULL
m.BGFX_SAMPLER_MAG_MASK = 0x300ULL
m.BGFX_SAMPLER_MIP_POINT = 0x400ULL
m.BGFX_SAMPLER_MIP_SHIFT = 0xaULL
m.BGFX_SAMPLER_MIP_MASK = 0x400ULL
m.BGFX_SAMPLER_COMPARE_LESS = 0x10000ULL
m.BGFX_SAMPLER_COMPARE_LEQUAL = 0x20000ULL
m.BGFX_SAMPLER_COMPARE_EQUAL = 0x30000ULL
m.BGFX_SAMPLER_COMPARE_GEQUAL = 0x40000ULL
m.BGFX_SAMPLER_COMPARE_GREATER = 0x50000ULL
m.BGFX_SAMPLER_COMPARE_NOTEQUAL = 0x60000ULL
m.BGFX_SAMPLER_COMPARE_NEVER = 0x70000ULL
m.BGFX_SAMPLER_COMPARE_ALWAYS = 0x80000ULL
m.BGFX_SAMPLER_COMPARE_SHIFT = 0x10ULL
m.BGFX_SAMPLER_COMPARE_MASK = 0xf0000ULL
m.BGFX_SAMPLER_SAMPLE_STENCIL = 0x100000ULL
m.BGFX_SAMPLER_BORDER_COLOR_SHIFT = 0x18ULL
m.BGFX_SAMPLER_BORDER_COLOR_MASK = 0xf000000ULL
m.BGFX_SAMPLER_RESERVED_SHIFT = 0x1cULL
m.BGFX_SAMPLER_RESERVED_MASK = 0xf0000000ULL
m.BGFX_SAMPLER_POINT = 0x540ULL
m.BGFX_SAMPLER_UVW_MIRROR = 0x15ULL
m.BGFX_SAMPLER_UVW_CLAMP = 0x2aULL
m.BGFX_SAMPLER_UVW_BORDER = 0x3fULL
m.BGFX_SAMPLER_BITS_MASK = 0xf07ffULL
m.BGFX_RESET_NONE = 0x0ULL
m.BGFX_RESET_FULLSCREEN = 0x1ULL
m.BGFX_RESET_FULLSCREEN_SHIFT = 0x0ULL
m.BGFX_RESET_FULLSCREEN_MASK = 0x1ULL
m.BGFX_RESET_MSAA_X2 = 0x10ULL
m.BGFX_RESET_MSAA_X4 = 0x20ULL
m.BGFX_RESET_MSAA_X8 = 0x30ULL
m.BGFX_RESET_MSAA_X16 = 0x40ULL
m.BGFX_RESET_MSAA_SHIFT = 0x4ULL
m.BGFX_RESET_MSAA_MASK = 0x70ULL
m.BGFX_RESET_VSYNC = 0x80ULL
m.BGFX_RESET_MAXANISOTROPY = 0x100ULL
m.BGFX_RESET_CAPTURE = 0x200ULL
m.BGFX_RESET_FLUSH_AFTER_RENDER = 0x2000ULL
m.BGFX_RESET_FLIP_AFTER_RENDER = 0x4000ULL
m.BGFX_RESET_SRGB_BACKBUFFER = 0x8000ULL
m.BGFX_RESET_HDR10 = 0x10000ULL
m.BGFX_RESET_HIDPI = 0x20000ULL
m.BGFX_RESET_DEPTH_CLAMP = 0x40000ULL
m.BGFX_RESET_SUSPEND = 0x80000ULL
m.BGFX_RESET_RESERVED_SHIFT = 0x1fULL
m.BGFX_RESET_RESERVED_MASK = 0x80000000ULL
m.BGFX_CAPS_ALPHA_TO_COVERAGE = 0x1ULL
m.BGFX_CAPS_BLEND_INDEPENDENT = 0x2ULL
m.BGFX_CAPS_COMPUTE = 0x4ULL
m.BGFX_CAPS_CONSERVATIVE_RASTER = 0x8ULL
m.BGFX_CAPS_DRAW_INDIRECT = 0x10ULL
m.BGFX_CAPS_FRAGMENT_DEPTH = 0x20ULL
m.BGFX_CAPS_FRAGMENT_ORDERING = 0x40ULL
m.BGFX_CAPS_FRAMEBUFFER_RW = 0x80ULL
m.BGFX_CAPS_GRAPHICS_DEBUGGER = 0x100ULL
m.BGFX_CAPS_HDR10 = 0x400ULL
m.BGFX_CAPS_HIDPI = 0x800ULL
m.BGFX_CAPS_INDEX32 = 0x1000ULL
m.BGFX_CAPS_INSTANCING = 0x2000ULL
m.BGFX_CAPS_OCCLUSION_QUERY = 0x4000ULL
m.BGFX_CAPS_RENDERER_MULTITHREADED = 0x8000ULL
m.BGFX_CAPS_SWAP_CHAIN = 0x10000ULL
m.BGFX_CAPS_TEXTURE_2D_ARRAY = 0x20000ULL
m.BGFX_CAPS_TEXTURE_3D = 0x40000ULL
m.BGFX_CAPS_TEXTURE_BLIT = 0x80000ULL
m.BGFX_CAPS_TEXTURE_COMPARE_ALL = 0x300000ULL
m.BGFX_CAPS_TEXTURE_COMPARE_LEQUAL = 0x200000ULL
m.BGFX_CAPS_TEXTURE_CUBE_ARRAY = 0x400000ULL
m.BGFX_CAPS_TEXTURE_DIRECT_ACCESS = 0x800000ULL
m.BGFX_CAPS_TEXTURE_READ_BACK = 0x1000000ULL
m.BGFX_CAPS_VERTEX_ATTRIB_HALF = 0x2000000ULL
m.BGFX_CAPS_VERTEX_ATTRIB_UINT10 = 0x4000000ULL
m.BGFX_CAPS_VERTEX_ID = 0x8000000ULL
m.BGFX_CAPS_FORMAT_TEXTURE_NONE = 0x0ULL
m.BGFX_CAPS_FORMAT_TEXTURE_2D = 0x1ULL
m.BGFX_CAPS_FORMAT_TEXTURE_2D_SRGB = 0x2ULL
m.BGFX_CAPS_FORMAT_TEXTURE_2D_EMULATED = 0x4ULL
m.BGFX_CAPS_FORMAT_TEXTURE_3D = 0x8ULL
m.BGFX_CAPS_FORMAT_TEXTURE_3D_SRGB = 0x10ULL
m.BGFX_CAPS_FORMAT_TEXTURE_3D_EMULATED = 0x20ULL
m.BGFX_CAPS_FORMAT_TEXTURE_CUBE = 0x40ULL
m.BGFX_CAPS_FORMAT_TEXTURE_CUBE_SRGB = 0x80ULL
m.BGFX_CAPS_FORMAT_TEXTURE_CUBE_EMULATED = 0x100ULL
m.BGFX_CAPS_FORMAT_TEXTURE_VERTEX = 0x200ULL
m.BGFX_CAPS_FORMAT_TEXTURE_IMAGE = 0x400ULL
m.BGFX_CAPS_FORMAT_TEXTURE_FRAMEBUFFER = 0x800ULL
m.BGFX_CAPS_FORMAT_TEXTURE_FRAMEBUFFER_MSAA = 0x1000ULL
m.BGFX_CAPS_FORMAT_TEXTURE_MSAA = 0x2000ULL
m.BGFX_CAPS_FORMAT_TEXTURE_MIP_AUTOGEN = 0x4000ULL
m.BGFX_RESOLVE_NONE = 0x0ULL
m.BGFX_RESOLVE_AUTO_GEN_MIPS = 0x1ULL
m.BGFX_PCI_ID_NONE = 0x0ULL
m.BGFX_PCI_ID_SOFTWARE_RASTERIZER = 0x1ULL
m.BGFX_PCI_ID_AMD = 0x1002ULL
m.BGFX_PCI_ID_INTEL = 0x8086ULL
m.BGFX_PCI_ID_NVIDIA = 0x10deULL
m.BGFX_CUBE_MAP_POSITIVE_X = 0x0ULL
m.BGFX_CUBE_MAP_NEGATIVE_X = 0x1ULL
m.BGFX_CUBE_MAP_POSITIVE_Y = 0x2ULL
m.BGFX_CUBE_MAP_NEGATIVE_Y = 0x3ULL
m.BGFX_CUBE_MAP_POSITIVE_Z = 0x4ULL
m.BGFX_CUBE_MAP_NEGATIVE_Z = 0x5ULL
*/

module.exports = bgfx;
